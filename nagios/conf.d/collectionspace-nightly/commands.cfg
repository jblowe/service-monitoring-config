# CollectionSpace Nightly Nagios configuration
# 
# commands.cfg

########################################################################
# Commands that use the NRPE system on the client host(s), to monitor
# the status of resources or other conditions on that host by running
# plugin code on the host itself.
#
# The following commands require that:
# * Nagios, NRPE (Nagios Remote Plugin Executor), and appropriate Nagios
#   plugins are installed on the client host.
# * The NRPE daemon is actively running on the client host.
# * The client host has been configured to grant access to one or more
#   monitoring server(s) running Nagios.
########################################################################

# None yet defined here

########################################################################
# Commands that communicate with services on the client host(s)
########################################################################

# For details regarding the options in the "check_ping" plugin,
# used in one or more commands below, see
# http://nagios-plugins.org/doc/man/check_ping.html

# --------------------------------------
# Check CollectionSpace Nightly via Ping 
# --------------------------------------

# Ping the CollectionSpace Nightly host.
# Return a warning or error if the time required for a response,
# or the percentage of packets dropped, exceeds specified threshholds
#
# Value pairs used with --warning and --critical, below:
# "<rta>,<pl>% where <rta> is the round trip average travel
# time (ms) which triggers a WARNING or CRITICAL state, and <pl>
# is the percentage of packet loss to trigger an alarm state."

define command {
  command_name  check-collectionspace-nightly-ping
  command_line  /usr/lib/nagios/plugins/check_ping --hostname=nightly.collectionspace.org --use-ipv4 --warning=2000.0,20% --critical=5000.0,60% --timeout=8
}

# For details regarding the options in the "check_http" plugin,
# used in one or more commands below, see
# http://nagios-plugins.org/doc/man/check_http.html
#
# When testing the 'check' commands that retrieve data from a web page 
# via check_http, below, you can generate errors by changing the
# "--string=" value to, say, "NonExistentString" or the "--regex=" value
# to a regular expression known not to match expected data on that page.

# ---------------------------------------
# Check CollectionSpace Nightly Home Page
# ---------------------------------------

# Check the CollectionSpace Nightly core tenant home page.
# Verify that an expected string is returned in the results.

# command: check-collectionspace-nightly-core-tenant-home-page
define command {
  command_name  check-collectionspace-nightly-core-tenant-home-page
  command_line  /usr/lib/nagios/plugins/check_http --hostname=nightly.collectionspace.org --port=8180 --url=/collectionspace/ui/core/html/index.html --onredirect=follow --string="ogin"
}

# ------------------------------------------------------------
# Check CollectionSpace Nightly CollectionObjects List Results
# ------------------------------------------------------------

# Send a CollectionObjects list request to the CollectionSpace
# Nightly core tenant.
#
# Verify that at least one item is returned in list results,
# as evidenced by the number returned in the <totalItems>
# element, in the header block of those results.
#
# If this element is not returned, or if its value is "0",
# identify this as an error condition.

# Note: Some commands below use authorization values from $USERx$ macros
# in $NAGIOS_HOME/private/resource.cfg  (That file is not checked into version control.)
#
# For details regarding that file and the macro values it contains, see
# http://sourceforge.net/p/nagios/nagioscore/ci/master/tree/sample-config/resource.cfg.in

# command: check-collectionspace-nightly-core-tenant-list-collectionobjects
define command {
  command_name  check-collectionspace-nightly-core-tenant-list-collectionobjects
  command_line  /usr/lib/nagios/plugins/check_http --hostname=nightly.collectionspace.org --port=8180 --url=/cspace-services/collectionobjects --authorization=$USER3$:$USER4$ --regex="<totalItems>[1-9]+[0-9]*</totalItems>"
}
